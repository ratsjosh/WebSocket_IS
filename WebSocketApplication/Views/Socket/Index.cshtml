@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container">
    <div class="row">
        <div class="col-lg-6">
            <h1>Global Chat</h1>
            <div id="wrap" class="message-wrap">
                <div id="chat" class="msg-wrap">
                    <div class="alert alert-info msg-date">
                        <strong>Today</strong>
                    </div>
                </div>
                <div class="send-wrap ">
                    <input class="form-control send-message" id="text-field" placeholder="Write a reply..." />
                    <br />
                    <button type="button" class="btn btn-primary" id="send">Send</button>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <h1>Private Message</h1>
            <div id="wrap" class="message-wrap">
                <p>To:<input type="text" id="to" /></p>
                <p>content:<input type="text" id="content" /></p>
                <button type="button" class="btn btn-success" id="sendUserMessage">Send</button>
                <div id="private-chat" class="msg-wrap">
                </div>
            </div>
        </div>
    </div>
</div>
<br />
<div class="col-md-12">
    <div class="panel panel-default panel-table">
        <div class="panel-heading">
            <div class="row">
                <div class="col col-md-6">
                    <h3 class="panel-title">Active Connections</h3>
                </div>
            </div>
        </div>
        <div class="panel-body">
            <table class="table table-striped table-bordered table-list">
                <thead>
                    <tr>
                        <th class="hidden-xs">ID</th>
                        <th>Socket Identification</th>
                        <th><em class="glyphicon glyphicon-signal"></em></th>
                    </tr>
                </thead>
                <tbody id="active-connections"></tbody>
            </table>
        </div>
    </div>
</div>
<script>
    var count = 0;
    var currentSocketConnection = null;

    var btnStart = document.getElementById("send");
    var btnSend = document.getElementById("sendUserMessage");

    var protocol = location.protocol === "https:" ? "wss:" : "ws:";
    var wsUri = protocol + "//" + window.location.host + "/ws";
    var socket = new WebSocket(wsUri);

    socket.onopen = e => {
        console.log("socket opened", e);
    };

    socket.onmessage = function (e) {
        console.log("socket message recieved", e);
        if (isJson(e.data) === true) {
            let result = JSON.parse(e.data);

            if (currentSocketConnection == null) {
                currentSocketConnection = result.Sender;
            }

            if (result.IsPrivateMessage === true) {
                $("#private-chat").append(cmsg(result.Sender, result.Message));
            }
            else if (result.IsPrivateMessage === false) {
                // New connection has been established
                let connections = JSON.parse(result.Message);
                for (let i = 0; i < connections.length; i++) {
                    if (!$('#' + connections[i]).length && currentSocketConnection != connections[i]) {
                        var $tr = $('<tr>', { id: connections[i] });
                        var $trCount = $('<td>', { class: "hidden-xs", text: count++ });
                        var $trSocket = $('<td>', { text: connections[i] });
                        var $trBtn = $('<td>');
                        var $btn = $('<button>', { class: "btn btn-success", text: "Copy" });
                        $btn.click(function (e) {
                            let id = this.closest("tr").id;
                            copyTextToClipboard(id);
                        });
                        $tr.append($trCount);
                        $tr.append($trSocket);
                        $trBtn.append($btn);
                        $tr.append($trBtn);
                        $('#active-connections').append($tr);
                    }
                }
            }
        }
        else {
            $("#chat").append(cmsg(e.origin, e.data));
        }
    };

    function copyTextToClipboard(text) {
        var textArea = document.createElement("textarea");

        //
        // *** This styling is an extra step which is likely not required. ***
        //
        // Why is it here? To ensure:
        // 1. the element is able to have focus and selection.
        // 2. if element was to flash render it has minimal visual impact.
        // 3. less flakyness with selection and copying which **might** occur if
        //    the textarea element is not visible.
        //
        // The likelihood is the element won't even render, not even a flash,
        // so some of these are just precautions. However in IE the element
        // is visible whilst the popup box asking the user for permission for
        // the web page to copy to the clipboard.
        //

        // Place in top-left corner of screen regardless of scroll position.
        textArea.style.position = 'fixed';
        textArea.style.top = 0;
        textArea.style.left = 0;

        // Ensure it has a small width and height. Setting to 1px / 1em
        // doesn't work as this gives a negative w/h on some browsers.
        textArea.style.width = '2em';
        textArea.style.height = '2em';

        // We don't need padding, reducing the size if it does flash render.
        textArea.style.padding = 0;

        // Clean up any borders.
        textArea.style.border = 'none';
        textArea.style.outline = 'none';
        textArea.style.boxShadow = 'none';

        // Avoid flash of white box if rendered for any reason.
        textArea.style.background = 'transparent';


        textArea.value = text;

        document.body.appendChild(textArea);

        textArea.select();

        try {
            var successful = document.execCommand('copy');
            var msg = successful ? 'successful' : 'unsuccessful';
            console.log('Copying text command was ' + msg);
        } catch (err) {
            console.log('Oops, unable to copy');
        }

        document.body.removeChild(textArea);
    }


    function isJson(str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    }

    function cmsg(s, d) {
        var wrap = $("<div>", { class: "media msg" });
        var div = $("<div>", { class: "media-body" });
        var time = $("<small>", { class: "pull-right time" }).text(new Date().toDateString()).append($("<i>", { class: "fa fa-clock-o" }));
        var user = $("<h5>", { class: "media-heading" }).text(s);
        var message = $("<div>", { class: "col-lg-10" }).text(d);
        wrap.append(div.append(time).append(user).append(message));
        return wrap;

    }

    btnStart.addEventListener("click", function (e) {
        e.preventDefault();
        var input = $("#text-field").val();
        var message = (input !== "" && input != undefined) ? input : "Empty string...";

        // Send message to server through socket
        socket.send(message);
        document.getElementById("text-field").value = "";
    });

    btnSend.addEventListener("click", function (e) {
        socket.send(JSON.stringify({
            Receiver: document.getElementById("to").value,
            Message: document.getElementById("content").value
        }));

        document.getElementById("content").value = "";
    });

</script>
